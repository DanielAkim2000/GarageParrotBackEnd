security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Utilisateurs
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login 
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    encoders:
        App\Entity\Utilisateurs:
            algorithm: bcrypt
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        #bloque l acces au donnes 
        - { path: ^/api/createUtilisateur,       roles: ROLE_ADMIN }
        - { path: ^/api/createUtilisateur,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/editUsers/,       roles: ROLE_ADMIN }
        - { path: ^/api/editUsers/,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/deleteEmploye/,       roles: ROLE_ADMIN }
        - { path: ^/api/deleteEmploye/,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/editService/,       roles: ROLE_ADMIN }
        - { path: ^/api/editService/,       roles: IS_AUTHENTICATED_FULLY  }
        - { path: ^/api/createService,       roles: ROLE_ADMIN }
        - { path: ^/api/createService,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/deleteService/,       roles: ROLE_ADMIN }
        - { path: ^/api/deleteService/,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/createHoraire,       roles: ROLE_ADMIN }
        - { path: ^/api/createHoraire,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/deleteHoraire/,       roles: ROLE_ADMIN }
        - { path: ^/api/deleteHoraire/,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/editVoiture/,       roles: [ROLE_ADMIN, ROLE_USER] }
        - { path: ^/api/editVoiture/,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/createVoiture,       roles: [ROLE_ADMIN, ROLE_USER] }
        - { path: ^/api/createVoiture,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/deleteVoiture/,       roles: [ROLE_ADMIN, ROLE_USER] }
        - { path: ^/api/deleteVoiture/,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/createTemoignage,       roles: [ROLE_ADMIN, ROLE_USER] }
        - { path: ^/api/createTemoignage,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/employes,       roles: [ROLE_ADMIN] }
        - { path: ^/api/employes,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/servicesAdmin,       roles: [ROLE_ADMIN] }
        - { path: ^/api/servicesAdmin,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/contacts,       roles: [ROLE_ADMIN, ROLE_USER] }
        - { path: ^/api/contacts,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/horairesAdmin,       roles: ROLE_ADMIN }
        - { path: ^/api/horairesAdmin,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/editHoraire/,       roles: ROLE_ADMIN }
        - { path: ^/api/editHoraire/,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
